uregint_t subleqmem[] = {
0x00, 0x80, 0x00, 0x04,//0
0x00, 0xA0, 0x00, 0x08,//4
0x00, 0xC6, 0x00, 0x0C,//8
0x00, 0x06, 0x00, 0x10,//C
0x00, 0x00, 0xFF, 0xFF,//10
0x00, 0x85, 0x00, 0x18,//14
0x00, 0xC6, 0x00, 0x1C,//18
0x00, 0xA6, 0x00, 0x20,//1C
0x00, 0x00, 0xFF, 0xFF,//20
0x00, 0x88, 0x00, 0x28,//24
0x00, 0xC6, 0x00, 0x2C,//28
0x01, 0x06, 0x00, 0x30,//2C
0x00, 0xA7, 0x00, 0x34,//30
0x00, 0x27, 0x00, 0x40,//34
0x01, 0x08, 0x00, 0x3C,//38
0x00, 0xE7, 0xFF, 0xFF,//3C
0x01, 0x06, 0x00, 0x44,//40
0x01, 0x08, 0x00, 0x48,//44
0x00, 0xC8, 0x00, 0x4C,//48
0x00, 0x00, 0x00, 0x34,//4C
0x00, 0xC6, 0x00, 0x54,//50
0x00, 0x85, 0x00, 0x5C,//54
0x00, 0x26, 0x00, 0x5C,//58
0x00, 0x00, 0xFF, 0xFF,//5C
0x00, 0xC6, 0x00, 0x64,//60
0x00, 0x04, 0x00, 0x6C,//64
0x00, 0x09, 0x00, 0x74,//68
0x00, 0x46, 0x00, 0x70,//6C
0x00, 0x29, 0x00, 0x74,//70
0x00, 0x88, 0x00, 0x78,//74
0x00, 0xA0, 0x00, 0x7C,//78
0x00, 0x67, 0x00, 0x80,//7C
0x00, 0x07, 0x00, 0x84,//80
0x00, 0x27, 0x00, 0x98,//84
0x01, 0x08, 0x00, 0x8C,//88
0x00, 0x00, 0x00, 0x90,//8C
0x01, 0x29, 0x00, 0x94,//90
0x00, 0xE7, 0xFF, 0xFF,//94
0x01, 0x26, 0x00, 0x9C,//98
0x01, 0x29, 0x00, 0xA0,//9C
0x00, 0xE9, 0x00, 0xA4,//A0
0x00, 0x04, 0x00, 0xB8,//A4
0x01, 0x04, 0x00, 0xAC,//A8
0x01, 0x08, 0x00, 0xB0,//AC
0x00, 0x88, 0x00, 0xB4,//B0
0x00, 0x00, 0x00, 0x84,//B4
0x00, 0x26, 0x00, 0xBC,//B8
0x00, 0x00, 0x00, 0xA8,//BC
0x00, 0x88, 0x00, 0xC4,//C0
0x00, 0xC6, 0x00, 0xC8,//C4
0x01, 0x06, 0x00, 0xCC,//C8
0x00, 0xA7, 0x00, 0xD0,//CC
0x00, 0x27, 0x00, 0xDC,//D0
0x01, 0x08, 0x00, 0xD8,//D4
0x00, 0xE7, 0xFF, 0xFF,//D8
0x01, 0x06, 0x00, 0xE0,//DC
0x00, 0x00, 0x00, 0xD0//E0
};


// Address Calculation => offset + (X-1)*4 where X is LX
//add/addi/addu/addiu DEST, SRC1, SRC2 -> DEST = SRC1 + SRC2
// Address Offset = 0
// L1: SRC1, Z, L2     
// L2: SRC2, z, L3
// L3: DEST, DEST, L4
// L4: Z, DEST, L5
// L5: Z, Z, end

//sub/subi/subu/subiu DEST, SRC1, SRC2 -> DEST = SRC1 - SRC2
// Address Offset = 20
// L1: SRC1, SRC2, L2
// L2: DEST, DEST, L3
// L3: SRC2, DEST, L4
// L4: Z, Z end

//sll/sllv DEST, SRC1, SRC2 -> DEST = SRC1 << SRC2
// Address Offset = 36
// L1: SRC1, TEMP2, L2
// L2: DEST, DEST, L3
// L3: TEMP2, DEST, L4
// L4: SRC2, TEMP1, L5
// L5: MONE, TEMP1, L8
// L6: TEMP2, TEMP2, L7
// L7: TEMP1, TEMP1, end
// L8: TEMP2, DEST, L9
// L9: TEMP2, TEMP2, L10
// L10: DEST, TEMP2, L11
// L11: Z, Z, L5

//slt/sltu/slti/sltiu DEST, SRC1, SRC2 -> DEST = 1 if SRC1 < SRC2 else DEST = 0
// Address Offset = 80
// L1: DEST, DEST, L2
// L2: SRC1, SRC2, L4
// L3: MONE, DEST, end
// L4: Z, Z, end

//srl/srlv/sra/srav DEST, SRC1, SRC2 -> DEST = SRC1 >> SRC2
// Address Offset = 96
// L1: DEST, DEST, L2
// L2: Z, SRC1, L4
// L3: Z, TEMP3, L6
// L4: ONE, DEST, L5
// L5: MONE, TEMP3, L6 
// L6: SRC1, TEMP2, L7
// L7: SRC2, Z, L8
// L8: WORD, TEMP1, L9
// L9: Z, TEMP1, L10
// L10: MONE, TEMP1, L15
// L11: TEMP2, TEMP2, L12
// L12: Z, Z, L13
// L13: TEMP3, TEMP3, L14
// L14: TEMP1, TEMP1, end
// L15: TEMP3, DEST, L16
// L16: TEMP3, TEMP3, L17
// L17: DEST, TEMP3, L18
// L18: Z, SRC1, L23
// L19: TEMP2, SRC1, L20
// L20: TEMP2, TEMP2, L21
// L21: SRC1, TEMP2, L22
// L22: Z, Z, L10
// L23: MONE, DEST, L24
// L24: Z, Z, L19

//mult/multu DEST, SRC1, SRC2 -> DEST = SRC1 * SRC2
// Address Offset = 192
// L1: SRC1, TEMP2, L2
// L2: DEST, DEST, L3
// L3: TEMP2, DEST, L4
// L4: SRC2, TEMP1, L5
// L5: MONE, TEMP1, L8
// L6: TEMP2, TEMP2, L7
// L7: TEMP1, TEMP1, end
// L8: TEMP2, DEST, L9
// L9: Z, Z, L5